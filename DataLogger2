/********************************************************************/
// INCLUDE NEEDED LIBRARIES
#include <OneWire.h> 
#include <DallasTemperature.h>
#include <Adafruit_GPS.h> //Load the GPS Library. Make sure you have installed the library form the adafruit site above
#include <SoftwareSerial.h> //Load the Software Serial Library. This library in effect gives the arduino additional serial ports

/********************************************************************/
// Data wire is plugged into pin 2 on the Arduino 
#define ONE_WIRE_BUS 8 
/********************************************************************/
// Setup a oneWire instance to communicate with any OneWire devices  
// (not just Maxim/Dallas temperature ICs) 
OneWire oneWire(ONE_WIRE_BUS); 
/********************************************************************/
// Pass our oneWire reference to Dallas Temperature. 
DallasTemperature sensors(&oneWire);
/********************************************************************/ 
// Define pressure sensor variables
int pressureSensorValue=analogRead(A1);
float pressureVoltage;
float pascals;
float bars;
/********************************************************************/ 
// Define temp sensor variables
float tempC;
float tempF;
/********************************************************************/ 
// Define GPS variables
SoftwareSerial mySerial(4, 3); //Initialize SoftwareSerial, and tell it you will be connecting through pins 4 and 3
Adafruit_GPS GPS(&mySerial); //Create GPS object
String NMEA1;  //We will use this variable to hold our first NMEA sentence
String NMEA2;  //We will use this variable to hold our second NMEA sentence
char c;       //Used to read the characters spewing from the GPS module

void setup(void) 
{ 
 // start serial port 
 Serial.begin(9600); // Open serial at 9600 baud rate
 GPS.begin(9600); // start the GPS module at 9600
 GPS.sendCommand("$PGCMD,33,0*6D"); // Turn Off GPS Antenna Update
 GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA); //Tell GPS we want only $GPRMC and $GPGGA NMEA sentences
 GPS.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ);   // 1 Hz update rate
 delay(1000);  //Pause
 sensors.begin(); // start the temperature sensor library
} 
void loop(void) 
{ 
  readGPS();
  readTemp();
  readPressure();
  delay(1000);
}

void readTemp()
{
 // call sensors.requestTemperatures() to issue a global temperature 
 // request to all devices on the bus 
/********************************************************************/
 sensors.requestTemperatures(); // Send the command to get temperature readings 
/********************************************************************/
 tempC = sensors.getTempCByIndex(0);   
 tempF = sensors.toFahrenheit(tempC); 
 Serial.print(tempC);
 Serial.print(",");
 Serial.print(tempF);
 Serial.print(",");
}

void readPressure() 
{
  pressureVoltage = (pressureSensorValue*5.0)/1024.0;
  pascals = (3.0*((float)pressureVoltage-0.47))*1000000.0;
  bars = pascals/1000000;
  Serial.print(pascals);
  Serial.print(",");
  Serial.print(bars);
  Serial.print(",");
}

void readGPS()
{
  clearGPS();    //Serial port probably has old or corrupt data, so begin by clearing it all out
  while(!GPS.newNMEAreceived()) { //Keep reading characters in this loop until a good NMEA sentence is received
  c=GPS.read(); //read a character from the GPS
  }
  GPS.parse(GPS.lastNMEA());  //Once you get a good NMEA, parse it
  NMEA1=GPS.lastNMEA();      //Once parsed, save NMEA sentence into NMEA1
  while(!GPS.newNMEAreceived()) {  //Go out and get the second NMEA sentence, should be different type than the first one read above.
  c=GPS.read();
  }
  GPS.parse(GPS.lastNMEA());
  NMEA2=GPS.lastNMEA();
  Serial.println(NMEA1);
  Serial.println(NMEA2);
  Serial.println("");
}

void clearGPS()
{
  while(!GPS.newNMEAreceived()) {
  c=GPS.read();
  }
  GPS.parse(GPS.lastNMEA());
  while(!GPS.newNMEAreceived()) {
  c=GPS.read();
  }
  GPS.parse(GPS.lastNMEA());
}
