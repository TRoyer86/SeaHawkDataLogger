/********************************************************************/
// INCLUDE NEEDED LIBRARIES
#include <OneWire.h> 
#include <DallasTemperature.h>
#include <Adafruit_GPS.h> //Load the GPS Library. Make sure you have installed the library form the adafruit site above
#include <SoftwareSerial.h> //Load the Software Serial Library. This library in effect gives the arduino additional serial ports
#include <SD.h> // Load the SD library
#include <SPI.h> // Load the SPI library
#include <Wire.h> // Load library to communicate over I2C

/********************************************************************/
// Data wire is plugged into pin 9 on the Arduino 
#define ONE_WIRE_BUS 9 
/********************************************************************/
// Setup a oneWire instance to communicate with any OneWire devices  
// (not just Maxim/Dallas temperature ICs) 
OneWire oneWire(ONE_WIRE_BUS); 
/********************************************************************/
// Pass our oneWire reference to Dallas Temperature. 
DallasTemperature sensors(&oneWire);
/********************************************************************/ 
// Define pressure sensor variables
int pressureSensorValue=analogRead(A1);
float pressureVoltage;
float pascals;
float bars;
/********************************************************************/ 
// Define temp sensor variables
float tempC;
float tempF;
/********************************************************************/ 
// Define GPS variables
SoftwareSerial mySerial(3, 2); //Initialize SoftwareSerial, and tell it you will be connecting through pins 3 and 2
Adafruit_GPS GPS(&mySerial); //Create GPS object
String NMEA1;  //We will use this variable to hold our first NMEA sentence
String NMEA2;  //We will use this variable to hold our second NMEA sentence
char c;       //Used to read the characters spewing from the GPS module
float deg;
float degWhole;
float degDecimal;
/********************************************************************/ 
// Define SD card variables
int chipSelect = 5; // set chipSelect pin for SD card reader to 5
File myDataLog; // file the data will be written in

void setup(void) 
{ 
 // start serial port 
 Serial.begin(9600); // Open serial at 9600 baud rate
 pinMode(10,OUTPUT); // Need to reserve pin 10 for output
 SD.begin(9); // Initialize the SD card reader
 GPS.begin(9600); // start the GPS module at 9600
 GPS.sendCommand("$PGCMD,33,0*6D"); // Turn Off GPS Antenna Update
 GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA); //Tell GPS we want only $GPRMC and $GPGGA NMEA sentences
 GPS.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ);   // 1 Hz update rate
 delay(1000);  //Pause
 sensors.begin(); // start the temperature sensor library
} 
void loop(void) 
{ 
  myDataLog = SD.open("DataLog.csv", FILE_WRITE);
  if (myDataLog)
  // get readings and display on serial monitor and write to file
  // data will be in format: YEAR, MONTH, DAY, LAT, LONG, TEMP_C, TEMP_F, PASCALS, BARS
  {
    readGPS();
    readTemp();
    readPressure();
  }
  
  delay(10000); // update data every 10 seconds
}

void readTemp()
{
 // call sensors.requestTemperatures() to issue a global temperature 
 // request to all devices on the bus 
/********************************************************************/
 sensors.requestTemperatures(); // Send the command to get temperature readings 
/********************************************************************/
 tempC = sensors.getTempCByIndex(0);   
 tempF = sensors.toFahrenheit(tempC); 
 Serial.print(tempC);
 Serial.print(",");
 Serial.print(tempF);
 Serial.print(",");
 // write the temp outputs to the file
 myDataLog.print(tempC);
 myDataLog.print(",");
 myDataLog.print(tempF);
 myDataLog.print(",");
}

void readPressure() 
{
  pressureVoltage = (pressureSensorValue*5.0)/1024.0;
  pascals = (3.0*((float)pressureVoltage-0.47))*1000000.0;
  bars = pascals/1000000;
  // show the pressure outputs in the serial monitor
  Serial.print(pascals);
  Serial.print(",");
  Serial.print(bars);
  Serial.print(",");
  // write the pressure outputs to the file
  myDataLog.print(pascals);
  myDataLog.print(",");
  myDataLog.println(bars);
}

void readGPS()
{
  clearGPS();    //Serial port probably has old or corrupt data, so begin by clearing it all out
  while(!GPS.newNMEAreceived()) { //Keep reading characters in this loop until a good NMEA sentence is received
  c=GPS.read(); //read a character from the GPS
  }
  GPS.parse(GPS.lastNMEA());  //Once you get a good NMEA, parse it
  NMEA1=GPS.lastNMEA();      //Once parsed, save NMEA sentence into NMEA1
  while(!GPS.newNMEAreceived()) {  //Go out and get the second NMEA sentence, should be different type than the first one read above.
  c=GPS.read();
  }
  GPS.parse(GPS.lastNMEA());
  NMEA2=GPS.lastNMEA();

  // print year, month, and day to serial monitor, and save values to file
  Serial.print(GPS.year);
  Serial.print(",");
  Serial.print(GPS.month);
  Serial.print(",");
  Serial.print(GPS.day);
  Serial.print(",");
  myDataLog.print(GPS.year);
  myDataLog.print(",");
  myDataLog.print(GPS.month);
  myDataLog.print(",");
  myDataLog.print(GPS.day);
  myDataLog.print(",");

  // get the latitude in appropriate format, output to serial monitor and file
  degWhole = float(int(GPS.latitude/100));
  degDecimal=(GPS.latitude-degWhole*100)/60;
  deg = degWhole + degDecimal;
  Serial.print(deg);
  Serial.print(GPS.lat); //Which hemisphere N or S
  Serial.print(",");
  if (GPS.lat == 'S') {
    deg = -1 * (deg); // if S hemisphere, return negative value
    }
  myDataLog.print(deg);
  myDataLog.print(",");
  
  // get the longitude in appropriate format, output to serial monitor and file
  degWhole = float(int(GPS.longitude/100));
  degDecimal=(GPS.longitude-degWhole*100)/60;
  deg = degWhole + degDecimal;
  Serial.print(deg);
  Serial.println(GPS.lon); //Which Hemisphere E or W
  if (GPS.lat == 'W') {
    deg = -1 * (deg); // if W hemisphere, return negative value
    }
  myDataLog.print(deg);
  myDataLog.print(",");
}

void clearGPS()
{
  while(!GPS.newNMEAreceived()) {
  c=GPS.read();
  }
  GPS.parse(GPS.lastNMEA());
  while(!GPS.newNMEAreceived()) {
  c=GPS.read();
  }
  GPS.parse(GPS.lastNMEA());
}
